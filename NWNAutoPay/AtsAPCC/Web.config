<?xml version="1.0" encoding="utf-8"?>
<!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=169433
  -->
<configuration>
  <configSections>
    <section name="nlog" type="NLog.Config.ConfigSectionHandler, NLog" />
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
  </configSections>
  
  <connectionStrings>
    
    <!-- **** There are no DB connections for this site's functionality  **** -->
    
    <!--<add name="DefaultConnection" connectionString="Data Source=(LocalDb)\v11.0;Initial Catalog=aspnet-AtsAPCC-20130717095301;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|\aspnet-AtsAPCC-20130717095301.mdf" providerName="System.Data.SqlClient" />-->
    <add name="DefaultConnection" connectionString="Data Source=.\SQLEXPRESS;AttachDbFilename=|DataDirectory|\aspnet-AtsAPCC-20130717095301.mdf;Initial Catalog=aspnet-AtsAPCC-20130717095301;Integrated Security=True;User Instance=True" providerName="System.Data.SqlClient" />
    <add name="diagnosticsdb" providerName="System.Data.SqlClient" connectionString="server=.;database=diagnosticsdb;Integrated Security=SSPI" />
  
  </connectionStrings>
  
  <appSettings>
    
    <add key="MainSiteUrl" value="https://wwwqa.gasco.com" />

    <!-- Application Name passed to web service to determine if site should be in maintenance mode. Default='NWNAutoPaySite' -->
    <!-- For a return value of True you can use the value of 'NWNAutoPaySite_True", or "NWNAutoPaySite_False" for False.     -->
    <add key="AppName" value="NWNAutoPaySite"/>
    
    <!-- The 'NWNAutoPaySiteMode' Value is used to control the service methods used by the wrapper service. Valid values are 'Test', 'Production', 'Development'.  
         Test and Development use Test DB.ServiceData.ServiceURLs.TestURL field(s) for running the proxy services.
         Production uses Production DB.ServiceData.ServiceURLs.ProductionURL field(s) for running the proxy services.-->
    
    <!-- NOTE: Development Mode does not use NWN services.  It returns 'True' for eligibility, and returns '12345' 
         for confirmation number without calling their enrollment web services -->

    <!--<add key="NWNAutoPaySiteMode" value="Development" />-->
    <add key="NWNAutoPaySiteMode" value="Test" />
    <!--<add key="NWNAutoPaySiteMode" value="Production" /> -->

    <!--The 'CardTrace' value is used (turned on) if there is a business case for use ONLY.
        0 is off, 1 is on. DO NOT USE IN PRODUCTION FOR LONG AND REMOVE THE LOG FILE.-->
    <add key="CardTrace" value="0"/>
    <!--<add key="CardTrace" value="1"/>-->

    <!--The 'TestErrorPage' value is used to automatically throw an exception to display the Error Page whenever a user visits the site.
        0 is off, 1 is on.  DO NOT USE IN PRODUCTION ENVIRONMENT. THIS IS INTENDED FOR DEVELOPMENT AND TESTING ONLY.-->
    <add key="TestErrorPage" value="0"/>
    <!--<add key="TestErrorPage" value="1"/>-->
  
    <!-- Enrollment Customer Name-->
    <add key="EnrollCustomerName" value="NWNAutoPay"/>
    
    <!-- Confirmation Customer Name -->
    <add key="ConfirmCustomerName" value="NWNAutoPay2"/>
    
    <!-- Confirmation WrapperService Name-->
    <add key="ConfirmCallName" value="PassThruEnrollAutoPayCC"/>
    
    <!-- Eligibility Wrapper Service  Name -->
    <add key="EligibilityCallName" value="PassThruIsEligableForAutoPayCC"/>
    
     
  </appSettings> 
  
  <system.diagnostics>
    <sharedListeners>
      <add name="bufferedEmail" type="Essential.Diagnostics.BufferedEmailTraceListener, Essential.Diagnostics" initializeData="user1@example.org,user2@example.org">
        <!--
          Adds formatted trace messages to a buffer and sends an email when the process 
          exits, or on request.
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=BufferedEmailTraceListener
        -->
        <filter type="System.Diagnostics.EventTypeFilter" initializeData="Information" />
      </add>
      <!--<add name="coloredconsole" type="Essential.Diagnostics.ColoredConsoleTraceListener, Essential.Diagnostics" template="{DateTime:HH':'mm':'ssZ} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}" convertWriteToEvent="true">-->
        <!--
          Writes to the console output or error stream, using color to highlight 
          event types and allowing a customized output format.
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=ColoredConsoleTraceListener
        -->
      <!--</add>-->
      <add name="email" type="Essential.Diagnostics.EmailTraceListener, Essential.Diagnostics" initializeData="user1@example.org,user2@example.org">
        <!--
	        Sends each trace message received in an email, using the specified subject and 
          body templates. Note: Set a filter to avoid flooding.
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=EmailTraceListener
        -->
        <filter type="System.Diagnostics.EventTypeFilter" initializeData="Warning" />
      </add>
      <add name="inmemory" type="Essential.Diagnostics.InMemoryTraceListener, Essential.Diagnostics" initializeData="100">
        <!--
          Records and immutable copy of trace events in memory, within a circular buffer
          of the specified size. 
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=InMemoryTraceListener
  	    -->
      </add>
      <add name="rollingfile" type="Essential.Diagnostics.RollingFileTraceListener, Essential.Diagnostics" initializeData="E:\App_Logs\NWNAutoPaySite\NWNAutoPay-{LocalDateTime:yyyy-MM-dd}.log" template="{LocalDateTime} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}">
        <!--
          Writes to a text file, rolling to a new file based on a filename template 
          (usually including the date).
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=RollingFileTraceListener
        -->
      </add>
      <add name="rollingxml" type="Essential.Diagnostics.RollingXmlTraceListener, Essential.Diagnostics" initializeData="E:\App_Logs\NWNAutoPaySite\NWNAutoPay-{LocalDateTime:yyyyMMdd}.svclog" template="{LocalDateTime} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}">
        <!--
          Writes writes E2ETraceEvent XML fragments to a text file, rolling to a new 
          file based on a filename template (usually including the date).
          The E2ETraceEvent XML fragment format can be read by the Service Trace Viewer tool.
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=RollingXmlTraceListener
        -->
      </add>
      <add name="cardLog" type="Essential.Diagnostics.RollingFileTraceListener, Essential.Diagnostics" initializeData="E:\App_Logs\NWNAutoPaySite\NWNAutoPay_CardLog-{LocalDateTime:yyyyMMdd}.log" convertWriteToEvent="true" template="{LocalDateTime} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}">
        <!--Writes to a text file, rolling to a new file based on a filename template 
          (usually including the date).
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=RollingFileTraceListener
        -->
      </add>
      <add name="Failuresfile" type="Essential.Diagnostics.RollingFileTraceListener, Essential.Diagnostics" initializeData="E:\App_Logs\NWNAutoPaySite\NWNAutoPay_Failures-{LocalDateTime:yyyy-MM-dd}.log" template="{LocalDateTime} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}">
        <!--
          Writes to a text file, rolling to a new file based on a filename template 
          (usually including the date).
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=RollingFileTraceListener
        -->
      </add>
      <add name="Maintenancefile" type="Essential.Diagnostics.RollingFileTraceListener, Essential.Diagnostics" initializeData="E:\App_Logs\NWNAutoPaySite\NWNAutoPay_Maintenance-{LocalDateTime:yyyy-MM-dd}.log" template="{LocalDateTime} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}">
        <!--
          Writes to a text file, rolling to a new file based on a filename template 
          (usually including the date).
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=RollingFileTraceListener
        -->
      </add>      <!--<add name="sqldatabase" type="Essential.Diagnostics.SqlDatabaseTraceListener, Essential.Diagnostics" initializeData="diagnosticsdb" applicationName="Diagnostics.Sample">-->
        <!--
          Trace listener that writes to the database connection specified into a
          table created by the diagnostics_regsql.exe tool (in the package tools directory).
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=SqlDatabaseTraceListener
        -->
      <!--</add>-->
    </sharedListeners>
    <sources>
      <source name="NWNAutoPaySite" switchValue="All">
        <listeners>
          <clear />
          <add name="rollingfile" />
        </listeners>
      </source>
      <source name="NWNAutoPaySite_CardLog" switchValue="All">
        <listeners>
          <clear/>
          <add name="cardLog" />
        </listeners>
      </source>
      <source name="NWNAutoPaySite_Failures" switchValue="All">
        <listeners>
          <clear />
          <add name="Failuresfile" />
        </listeners>
      </source>
      <source name="NWNAutoPaySite_Maintenance" switchValue="All">
        <listeners>
          <clear />
          <add name="Maintenancefile" />
        </listeners>
      </source>
      <!--
        = Sample Source =
      <source name=""
              switchValue="All|None|Critical|Error|Warning|Information|Verbose|ActivityTracing"
              switchName="">
        <listeners>
          <clear />
          <add name="" />
          <add name="" />
        </listeners>
      </source>
      -->
    </sources>
    <switches>
      <!--
          Specify switchName (instead of switchValue) to use the same
          switch for multiple sources.
          Values can either be SourceLevels name values, decimal,
          or hexadecimal.
        -->
      <add name="SourceSwitch1" value="None,Critical,Error,Warning,Information,Verbose,ActivityTracing,All" />
      <add name="SourceSwitch2" value="0,1,3,7,15,31,0xFF00,0xFFFF" />
    </switches>
    <!--
    -->
    <trace autoflush="true" indentsize="0">
      <listeners>
        <!--
          Legacy Trace.Write() statements (not using a TraceSource).
          Turn indent off to avoid confusion for multithreaded traces,
          and clear the default listener for performance.
        -->
        <clear />
      </listeners>
    </trace>
  </system.diagnostics>
  <system.web>
      <customErrors mode="Off" defaultRedirect="/AutoPayCredit/NotAvailable" />
      <compilation debug="true" targetFramework="4.5" />
      <sessionState timeout="20" />

      <httpRuntime targetFramework="4.5" encoderType="System.Web.Security.AntiXss.AntiXssEncoder,System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
    
    <pages>
      <namespaces>
        <add namespace="System.Web.Helpers" />
        <add namespace="System.Web.Mvc" />
        <add namespace="System.Web.Mvc.Ajax" />
        <add namespace="System.Web.Mvc.Html" />
        <add namespace="System.Web.Optimization" />
        <add namespace="System.Web.Routing" />
        <add namespace="System.Web.WebPages" />
      </namespaces>
    </pages>
  </system.web>
  <system.webServer>
    <modules runAllManagedModulesForAllRequests="true" />    
    <!--<validation validateIntegratedModeConfiguration="false" />-->
    <directoryBrowse enabled="true" />
<handlers>
      <remove name="ExtensionlessUrlHandler-ISAPI-4.0_32bit" />
      <remove name="ExtensionlessUrlHandler-ISAPI-4.0_64bit" />
      <remove name="ExtensionlessUrlHandler-Integrated-4.0" />
      <add name="ExtensionlessUrlHandler-ISAPI-4.0_32bit" path="*." verb="GET,HEAD,POST,DEBUG,PUT,DELETE,PATCH,OPTIONS" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
      <add name="ExtensionlessUrlHandler-ISAPI-4.0_64bit" path="*." verb="GET,HEAD,POST,DEBUG,PUT,DELETE,PATCH,OPTIONS" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
      <add name="ExtensionlessUrlHandler-Integrated-4.0" path="*." verb="GET,HEAD,POST,DEBUG,PUT,DELETE,PATCH,OPTIONS" type="System.Web.Handlers.TransferRequestHandler" preCondition="integratedMode,runtimeVersionv4.0" />
    </handlers>
  </system.webServer>
  
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Helpers" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-2.0.0.0" newVersion="2.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-4.0.0.0" newVersion="4.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.WebPages" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-2.0.0.0" newVersion="2.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="WebGrease" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-1.5.2.14234" newVersion="1.5.2.14234" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Antlr3.Runtime" publicKeyToken="eb42632606e9261f" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-3.5.0.2" newVersion="3.5.0.2" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  <nlog xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <variable name="logDirectory" value="${basedir}/logs/${shortdate}" />
    <extensions>
      <add assembly="AtsAPCC" />
    </extensions>
    <targets async="true">
      <target name="traceFile" xsi:type="File" fileName="${logDirectory}/trace.txt" layout="${longdate}|${message}" />
      <target name="primaryLogFile" xsi:type="File" fileName="${logDirectory}/log.txt" layout="${longdate}|${level}|${message}${newline}[${exception:format=ShortType}: ${exception:format=Message}]${newline}${exception:format=StackTrace}" />
      <target name="emailLogFile" xsi:type="File" fileName="${logDirectory}/emaillog.txt" layout="${longdate}|${level}|${message}" />
      <target name="eventLog" xsi:type="EventLog" source="NWNatural.Web" layout="${longdate}|${level}|${message}${newline}[${exception:format=ShortType}: ${exception:format=Message}]${newline}${exception:format=StackTrace}" />   
    </targets>
    <rules>
      <logger name="*" writeTo="primaryLogFile,eventLog" minlevel="Warn" />
    </rules>
  </nlog>  
  <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.SqlConnectionFactory, EntityFramework" />
  </entityFramework>
  <system.serviceModel>
    <behaviors>
      <serviceBehaviors>
        <behavior>
          
          <!-- **** To avoid disclosing metadata information, set the values below to false before DEPLOYEMENT **** -->
          
          <!--<serviceMetadata httpGetEnabled="false" httpsGetEnabled="false"/>-->
          <serviceMetadata httpGetEnabled="true" httpsGetEnabled="true"/>
          
          <!-- **** To receive exception details in faults for debugging purposes, set the value below to 'true'.  
               Set the value to 'false' before DEPLOYMENT to avoid displaying  exception information **** -->
          
          <!--<serviceDebug includeExceptionDetailInFaults="false"/>-->
          <serviceDebug includeExceptionDetailInFaults="true"/>
        
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <bindings>
      <basicHttpBinding>
        <binding name="BasicHttpBinding_IWrapperService" />
        <binding name="UtilitySoap" />
        <binding name="BasicHttpBinding_IEnrollCardService" />
        <binding name="BasicHttpBinding_ICardValidationService" />
        <binding name="BasicHttpBinding_IAtiWrapperServices" />
      </basicHttpBinding>
    </bindings>
    <client>
      <endpoint address="http://mtdog/IT_Params/Utility.asmx" binding="basicHttpBinding"
        bindingConfiguration="UtilitySoap" contract="App_In_Maintenance.UtilitySoap"
        name="UtilitySoap" />
      <endpoint address="http://localhost:55000/EnrollCard.svc" binding="basicHttpBinding"
        bindingConfiguration="BasicHttpBinding_IEnrollCardService" contract="EnrollCard.IEnrollCardService"
        name="BasicHttpBinding_IEnrollCardService" />
      <endpoint address="http://localhost:55000/CardServicesValidation.svc"
        binding="basicHttpBinding" bindingConfiguration="BasicHttpBinding_ICardValidationService"
        contract="CardValidation.ICardValidationService" name="BasicHttpBinding_ICardValidationService" />
      <endpoint address="http://localhost:54015/AtiWrapperServices.svc"
        binding="basicHttpBinding" bindingConfiguration="BasicHttpBinding_IAtiWrapperServices"
        contract="AtiWrapperServices.IAtiWrapperServices" name="BasicHttpBinding_IAtiWrapperServices" />
    </client>
  </system.serviceModel>
</configuration>
