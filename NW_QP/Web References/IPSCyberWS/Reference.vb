'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18052
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18052.
'
Namespace IPSCyberWS
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="RelaySoap", [Namespace]:="http://www.activetelesource.com/webservices/")>  _
    Partial Public Class Relay
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private RunTransOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AuthorizeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CaptureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AuthReversalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.NW_QP.My.MySettings.Default.NW_QP_IPSCyberWS_Relay
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event RunTransCompleted As RunTransCompletedEventHandler
        
        '''<remarks/>
        Public Event AuthorizeCompleted As AuthorizeCompletedEventHandler
        
        '''<remarks/>
        Public Event CaptureCompleted As CaptureCompletedEventHandler
        
        '''<remarks/>
        Public Event AuthReversalCompleted As AuthReversalCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activetelesource.com/webservices/RunTrans", RequestNamespace:="http://www.activetelesource.com/webservices/", ResponseNamespace:="http://www.activetelesource.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RunTrans( _
                    ByVal MerchantID As String,  _
                    ByVal MerchantReferenceCode As String,  _
                    ByVal ReconciliationID As String,  _
                    ByVal InvoiceReferenceNumber As String,  _
                    ByVal UserPO As String,  _
                    ByVal CustomerAccountNumber As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal NameSuffix As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal TransAmount As String,  _
                    ByVal CardNumber As String,  _
                    ByVal CardExpiration As String,  _
                    ByVal CardSecurityCode As String,  _
                    ByVal InvalidAVSCodes As String,  _
                    ByVal Source As String,  _
                    ByVal OptionalParams As String,  _
                    ByVal Test As Boolean) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("RunTrans", New Object() {MerchantID, MerchantReferenceCode, ReconciliationID, InvoiceReferenceNumber, UserPO, CustomerAccountNumber, FirstName, LastName, NameSuffix, Address1, Address2, City, State, Zip, TransAmount, CardNumber, CardExpiration, CardSecurityCode, InvalidAVSCodes, Source, OptionalParams, Test})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RunTransAsync( _
                    ByVal MerchantID As String,  _
                    ByVal MerchantReferenceCode As String,  _
                    ByVal ReconciliationID As String,  _
                    ByVal InvoiceReferenceNumber As String,  _
                    ByVal UserPO As String,  _
                    ByVal CustomerAccountNumber As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal NameSuffix As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal TransAmount As String,  _
                    ByVal CardNumber As String,  _
                    ByVal CardExpiration As String,  _
                    ByVal CardSecurityCode As String,  _
                    ByVal InvalidAVSCodes As String,  _
                    ByVal Source As String,  _
                    ByVal OptionalParams As String,  _
                    ByVal Test As Boolean)
            Me.RunTransAsync(MerchantID, MerchantReferenceCode, ReconciliationID, InvoiceReferenceNumber, UserPO, CustomerAccountNumber, FirstName, LastName, NameSuffix, Address1, Address2, City, State, Zip, TransAmount, CardNumber, CardExpiration, CardSecurityCode, InvalidAVSCodes, Source, OptionalParams, Test, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RunTransAsync( _
                    ByVal MerchantID As String,  _
                    ByVal MerchantReferenceCode As String,  _
                    ByVal ReconciliationID As String,  _
                    ByVal InvoiceReferenceNumber As String,  _
                    ByVal UserPO As String,  _
                    ByVal CustomerAccountNumber As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal NameSuffix As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal TransAmount As String,  _
                    ByVal CardNumber As String,  _
                    ByVal CardExpiration As String,  _
                    ByVal CardSecurityCode As String,  _
                    ByVal InvalidAVSCodes As String,  _
                    ByVal Source As String,  _
                    ByVal OptionalParams As String,  _
                    ByVal Test As Boolean,  _
                    ByVal userState As Object)
            If (Me.RunTransOperationCompleted Is Nothing) Then
                Me.RunTransOperationCompleted = AddressOf Me.OnRunTransOperationCompleted
            End If
            Me.InvokeAsync("RunTrans", New Object() {MerchantID, MerchantReferenceCode, ReconciliationID, InvoiceReferenceNumber, UserPO, CustomerAccountNumber, FirstName, LastName, NameSuffix, Address1, Address2, City, State, Zip, TransAmount, CardNumber, CardExpiration, CardSecurityCode, InvalidAVSCodes, Source, OptionalParams, Test}, Me.RunTransOperationCompleted, userState)
        End Sub
        
        Private Sub OnRunTransOperationCompleted(ByVal arg As Object)
            If (Not (Me.RunTransCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RunTransCompleted(Me, New RunTransCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activetelesource.com/webservices/Authorize", RequestNamespace:="http://www.activetelesource.com/webservices/", ResponseNamespace:="http://www.activetelesource.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Authorize( _
                    ByVal MerchantID As String,  _
                    ByVal MerchantReferenceCode As String,  _
                    ByVal ReconciliationID As String,  _
                    ByVal InvoiceReferenceNumber As String,  _
                    ByVal UserPO As String,  _
                    ByVal CustomerAccountNumber As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal NameSuffix As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal TransAmount As String,  _
                    ByVal CardNumber As String,  _
                    ByVal CardExpiration As String,  _
                    ByVal CardSecurityCode As String,  _
                    ByVal InvalidAVSCodes As String,  _
                    ByVal Source As String,  _
                    ByVal OptionalParams As String,  _
                    ByVal Test As Boolean) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Authorize", New Object() {MerchantID, MerchantReferenceCode, ReconciliationID, InvoiceReferenceNumber, UserPO, CustomerAccountNumber, FirstName, LastName, NameSuffix, Address1, Address2, City, State, Zip, TransAmount, CardNumber, CardExpiration, CardSecurityCode, InvalidAVSCodes, Source, OptionalParams, Test})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AuthorizeAsync( _
                    ByVal MerchantID As String,  _
                    ByVal MerchantReferenceCode As String,  _
                    ByVal ReconciliationID As String,  _
                    ByVal InvoiceReferenceNumber As String,  _
                    ByVal UserPO As String,  _
                    ByVal CustomerAccountNumber As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal NameSuffix As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal TransAmount As String,  _
                    ByVal CardNumber As String,  _
                    ByVal CardExpiration As String,  _
                    ByVal CardSecurityCode As String,  _
                    ByVal InvalidAVSCodes As String,  _
                    ByVal Source As String,  _
                    ByVal OptionalParams As String,  _
                    ByVal Test As Boolean)
            Me.AuthorizeAsync(MerchantID, MerchantReferenceCode, ReconciliationID, InvoiceReferenceNumber, UserPO, CustomerAccountNumber, FirstName, LastName, NameSuffix, Address1, Address2, City, State, Zip, TransAmount, CardNumber, CardExpiration, CardSecurityCode, InvalidAVSCodes, Source, OptionalParams, Test, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AuthorizeAsync( _
                    ByVal MerchantID As String,  _
                    ByVal MerchantReferenceCode As String,  _
                    ByVal ReconciliationID As String,  _
                    ByVal InvoiceReferenceNumber As String,  _
                    ByVal UserPO As String,  _
                    ByVal CustomerAccountNumber As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal NameSuffix As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal TransAmount As String,  _
                    ByVal CardNumber As String,  _
                    ByVal CardExpiration As String,  _
                    ByVal CardSecurityCode As String,  _
                    ByVal InvalidAVSCodes As String,  _
                    ByVal Source As String,  _
                    ByVal OptionalParams As String,  _
                    ByVal Test As Boolean,  _
                    ByVal userState As Object)
            If (Me.AuthorizeOperationCompleted Is Nothing) Then
                Me.AuthorizeOperationCompleted = AddressOf Me.OnAuthorizeOperationCompleted
            End If
            Me.InvokeAsync("Authorize", New Object() {MerchantID, MerchantReferenceCode, ReconciliationID, InvoiceReferenceNumber, UserPO, CustomerAccountNumber, FirstName, LastName, NameSuffix, Address1, Address2, City, State, Zip, TransAmount, CardNumber, CardExpiration, CardSecurityCode, InvalidAVSCodes, Source, OptionalParams, Test}, Me.AuthorizeOperationCompleted, userState)
        End Sub
        
        Private Sub OnAuthorizeOperationCompleted(ByVal arg As Object)
            If (Not (Me.AuthorizeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AuthorizeCompleted(Me, New AuthorizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activetelesource.com/webservices/Capture", RequestNamespace:="http://www.activetelesource.com/webservices/", ResponseNamespace:="http://www.activetelesource.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Capture(ByVal MerchantID As String, ByVal AuthRequestID As String, ByVal ReconciliationID As String, ByVal MerchantReferenceCode As String, ByVal TransAmount As String, ByVal Source As String, ByVal OptionalParams As String, ByVal Test As Boolean) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("Capture", New Object() {MerchantID, AuthRequestID, ReconciliationID, MerchantReferenceCode, TransAmount, Source, OptionalParams, Test})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CaptureAsync(ByVal MerchantID As String, ByVal AuthRequestID As String, ByVal ReconciliationID As String, ByVal MerchantReferenceCode As String, ByVal TransAmount As String, ByVal Source As String, ByVal OptionalParams As String, ByVal Test As Boolean)
            Me.CaptureAsync(MerchantID, AuthRequestID, ReconciliationID, MerchantReferenceCode, TransAmount, Source, OptionalParams, Test, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CaptureAsync(ByVal MerchantID As String, ByVal AuthRequestID As String, ByVal ReconciliationID As String, ByVal MerchantReferenceCode As String, ByVal TransAmount As String, ByVal Source As String, ByVal OptionalParams As String, ByVal Test As Boolean, ByVal userState As Object)
            If (Me.CaptureOperationCompleted Is Nothing) Then
                Me.CaptureOperationCompleted = AddressOf Me.OnCaptureOperationCompleted
            End If
            Me.InvokeAsync("Capture", New Object() {MerchantID, AuthRequestID, ReconciliationID, MerchantReferenceCode, TransAmount, Source, OptionalParams, Test}, Me.CaptureOperationCompleted, userState)
        End Sub
        
        Private Sub OnCaptureOperationCompleted(ByVal arg As Object)
            If (Not (Me.CaptureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CaptureCompleted(Me, New CaptureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activetelesource.com/webservices/AuthReversal", RequestNamespace:="http://www.activetelesource.com/webservices/", ResponseNamespace:="http://www.activetelesource.com/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AuthReversal(ByVal MerchantID As String, ByVal MerchantReferenceCode As String, ByVal AuthRequestID As String, ByVal ReversalAmount As String, ByVal Source As String, ByVal OptionalParams As String, ByVal Test As Boolean) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("AuthReversal", New Object() {MerchantID, MerchantReferenceCode, AuthRequestID, ReversalAmount, Source, OptionalParams, Test})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AuthReversalAsync(ByVal MerchantID As String, ByVal MerchantReferenceCode As String, ByVal AuthRequestID As String, ByVal ReversalAmount As String, ByVal Source As String, ByVal OptionalParams As String, ByVal Test As Boolean)
            Me.AuthReversalAsync(MerchantID, MerchantReferenceCode, AuthRequestID, ReversalAmount, Source, OptionalParams, Test, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AuthReversalAsync(ByVal MerchantID As String, ByVal MerchantReferenceCode As String, ByVal AuthRequestID As String, ByVal ReversalAmount As String, ByVal Source As String, ByVal OptionalParams As String, ByVal Test As Boolean, ByVal userState As Object)
            If (Me.AuthReversalOperationCompleted Is Nothing) Then
                Me.AuthReversalOperationCompleted = AddressOf Me.OnAuthReversalOperationCompleted
            End If
            Me.InvokeAsync("AuthReversal", New Object() {MerchantID, MerchantReferenceCode, AuthRequestID, ReversalAmount, Source, OptionalParams, Test}, Me.AuthReversalOperationCompleted, userState)
        End Sub
        
        Private Sub OnAuthReversalOperationCompleted(ByVal arg As Object)
            If (Not (Me.AuthReversalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AuthReversalCompleted(Me, New AuthReversalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub RunTransCompletedEventHandler(ByVal sender As Object, ByVal e As RunTransCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RunTransCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub AuthorizeCompletedEventHandler(ByVal sender As Object, ByVal e As AuthorizeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AuthorizeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub CaptureCompletedEventHandler(ByVal sender As Object, ByVal e As CaptureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CaptureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub AuthReversalCompletedEventHandler(ByVal sender As Object, ByVal e As AuthReversalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AuthReversalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
End Namespace
