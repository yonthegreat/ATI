#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ContextGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using AtiWrapperServicesORM.OpenAccess;
using AtiWrapperServices.AtiWrapperServicesEnums;

namespace AtiWrapperServicesORM.OpenAccess	
{
	public partial class AtiWrapperServicesModel : OpenAccessContext, IAtiWrapperServicesModelUnitOfWork
	{
		private static string connectionStringName = @"ServiceDataConnection";
			
		private static BackendConfiguration backend = GetBackendConfiguration();
				
		private static MetadataSource metadataSource = XmlMetadataSource.FromAssemblyResource("AtiWrapperServicesModel.rlinq");
		
		public AtiWrapperServicesModel()
			:base(connectionStringName, backend, metadataSource)
		{ }
		
		public AtiWrapperServicesModel(string connection)
			:base(connection, backend, metadataSource)
		{ }
		
		public AtiWrapperServicesModel(BackendConfiguration backendConfiguration)
			:base(connectionStringName, backendConfiguration, metadataSource)
		{ }
			
		public AtiWrapperServicesModel(string connection, MetadataSource metadataSource)
			:base(connection, backend, metadataSource)
		{ }
		
		public AtiWrapperServicesModel(string connection, BackendConfiguration backendConfiguration, MetadataSource metadataSource)
			:base(connection, backendConfiguration, metadataSource)
		{ }
			
		public IQueryable<WrapperValue> WrapperValues 
		{
			get
			{
				return this.GetAll<WrapperValue>();
			}
		}
		
		public IQueryable<WrapperValueProperty> WrapperValueProperties 
		{
			get
			{
				return this.GetAll<WrapperValueProperty>();
			}
		}
		
		public IQueryable<WrapperReturnType> WrapperReturnTypes 
		{
			get
			{
				return this.GetAll<WrapperReturnType>();
			}
		}
		
		public IQueryable<WrapperMethod> WrapperMethods 
		{
			get
			{
				return this.GetAll<WrapperMethod>();
			}
		}
		
		public IQueryable<WrapperMessageHeader> WrapperMessageHeaders 
		{
			get
			{
				return this.GetAll<WrapperMessageHeader>();
			}
		}
		
		public IQueryable<WrapperInputParameter> WrapperInputParameters 
		{
			get
			{
				return this.GetAll<WrapperInputParameter>();
			}
		}
		
		public IQueryable<ServiceURL> ServiceURLs 
		{
			get
			{
				return this.GetAll<ServiceURL>();
			}
		}
		
		public IQueryable<ServiceType> ServiceTypes 
		{
			get
			{
				return this.GetAll<ServiceType>();
			}
		}
		
		public IQueryable<ServiceName> ServiceNames 
		{
			get
			{
				return this.GetAll<ServiceName>();
			}
		}
		
		public IQueryable<ServiceMethod> ServiceMethods 
		{
			get
			{
				return this.GetAll<ServiceMethod>();
			}
		}
		
		public IQueryable<ServiceMessageHeader> ServiceMessageHeaders 
		{
			get
			{
				return this.GetAll<ServiceMessageHeader>();
			}
		}
		
		public IQueryable<ReturnType> ReturnTypes 
		{
			get
			{
				return this.GetAll<ReturnType>();
			}
		}
		
		public IQueryable<QualifiedName> QualifiedNames 
		{
			get
			{
				return this.GetAll<QualifiedName>();
			}
		}
		
		public IQueryable<InputParamater> InputParamaters 
		{
			get
			{
				return this.GetAll<InputParamater>();
			}
		}
		
		public IQueryable<Customer> Customers 
		{
			get
			{
				return this.GetAll<Customer>();
			}
		}
		
		public static BackendConfiguration GetBackendConfiguration()
		{
			BackendConfiguration backend = new BackendConfiguration();
			backend.Backend = "MsSql";
			backend.ProviderName = "System.Data.SqlClient";
			backend.Logging.MetricStoreSnapshotInterval = 0;
			return backend;
		}
	}
	
	public interface IAtiWrapperServicesModelUnitOfWork : IUnitOfWork
	{
		IQueryable<WrapperValue> WrapperValues
		{
			get;
		}
		IQueryable<WrapperValueProperty> WrapperValueProperties
		{
			get;
		}
		IQueryable<WrapperReturnType> WrapperReturnTypes
		{
			get;
		}
		IQueryable<WrapperMethod> WrapperMethods
		{
			get;
		}
		IQueryable<WrapperMessageHeader> WrapperMessageHeaders
		{
			get;
		}
		IQueryable<WrapperInputParameter> WrapperInputParameters
		{
			get;
		}
		IQueryable<ServiceURL> ServiceURLs
		{
			get;
		}
		IQueryable<ServiceType> ServiceTypes
		{
			get;
		}
		IQueryable<ServiceName> ServiceNames
		{
			get;
		}
		IQueryable<ServiceMethod> ServiceMethods
		{
			get;
		}
		IQueryable<ServiceMessageHeader> ServiceMessageHeaders
		{
			get;
		}
		IQueryable<ReturnType> ReturnTypes
		{
			get;
		}
		IQueryable<QualifiedName> QualifiedNames
		{
			get;
		}
		IQueryable<InputParamater> InputParamaters
		{
			get;
		}
		IQueryable<Customer> Customers
		{
			get;
		}
	}
}
#pragma warning restore 1591
