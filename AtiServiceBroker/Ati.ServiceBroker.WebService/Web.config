<?xml version="1.0" encoding="utf-8"?>
<configuration>

  <connectionStrings>
    <!--
        For SqlDatabaseTraceListener use the tool installed in the tools directory by Nuget 
        to install the default database on the local SQL instance, using Windows credentials:
        .\diagnostics_regsql.exe -E -AD
      -->
    <!--Development Connection String For localHost -->
    <!--<add name="CardEnrollmentService.Properties.Settings.ServiceBrokerDBConnectionString" connectionString="data source=DEVWILSON\SQLSERVER2008R2;Initial Catalog=ServiceBrokerDB;User=ati_servicebroker;Password=3rTfX1K1;Integrated Security=False" providerName="System.Data.SqlClient" />-->
    
    <!--Development connection String for Staging -->
    <add name="CardEnrollmentService.Properties.Settings.ServiceBrokerDBConnectionString" connectionString="data source=mtdog;Initial Catalog=ServiceBrokerDB;User=ati_servicebroker;Password=3rTfX1K1;Integrated Security=False" providerName="System.Data.SqlClient" />
    
    <add name="diagnosticsdb" providerName="System.Data.SqlClient" connectionString="server=.;database=diagnosticsdb;Integrated Security=SSPI" />
  
  </connectionStrings>
  
  <appSettings>
    <!--The CardActiveValue is used in the Enrollment Plug in to be passed into the card table to indicate what the Status of the card should be. There may be future needs for more values in the enrollment process-->
    <add key="aspnet:UseTaskFriendlySynchronizationContext" value="true" />

    <!--1 is active 0 is inactive-->
    <add key="CardActiveValue" value="1" />

    <!--0 is off 1 is on to trace card data for business reasons. DO NOT USE IN PRODUCTION FOR LONG AND REMOVE THE LOG FILE.-->
    <add key="CardTrace" value="0"/> 
    
    <!--This Value is used by the Enrollment Plug in to determine what operation mode to use. Valid values are Test, Production and Development-->
    <!--Valid values are Test, Production, Development-->
    <add key="EnrollmentMode" value="Test" />
    
    <!-- The Name of the WrapperService Call to make for Tempus enrollment -->
    <add key="TempusEnrollCallName" value="PassThruAtiTempusEnroll"/>
    
    <!-- The service provider name -->
    <add key="TempusCustomerName" value="Tempus"/>
    
    <!-- The Tempus Customer Id in the ServiceData database -->
    <add key="TempusCustomerId" value="5"/>
    
    <!-- The Tempus Production TRANSARMORTOKENTYPE that needs to be present for the card to enroll -->
    <add key="TempusEnrollTokens" value="TRANSARMORTOKENTYPE"/>
    
  </appSettings>
  <system.web>
    <compilation debug="true" targetFramework="4.5" />
    <httpRuntime targetFramework="4.5" />
  </system.web>
  <system.serviceModel>
    <bindings>
      <basicHttpBinding>
        <binding name="BasicHttpBinding_IAtiWrapperServices" />
      </basicHttpBinding>
    </bindings>
    <client>
      <endpoint address="http://localhost:54015/AtiWrapperServices.svc"
        binding="basicHttpBinding" bindingConfiguration="BasicHttpBinding_IAtiWrapperServices"
        contract="AtiWrapperServices.IAtiWrapperServices" name="BasicHttpBinding_IAtiWrapperServices" />
    </client>
    <serviceHostingEnvironment>
      <serviceActivations>
        <add factory="Ati.ServiceHost.Web.WebServiceHostFactory" service="LuhnModValidation" relativeAddress="CardServicesValidation.svc" />
        <add factory="Ati.ServiceHost.Web.WebServiceHostFactory" service="CardTypeService" relativeAddress="CardServicesCardType.svc" />
        <add factory="Ati.ServiceHost.Web.WebServiceHostFactory" service="TempusEnrollCardService" relativeAddress="EnrollCard.svc" />
        <add factory="Ati.ServiceHost.Web.WebServiceHostFactory" service="DataTransformationService" relativeAddress="DataTransformationService.svc" />
        <add factory="Ati.ServiceHost.Web.WebServiceHostFactory" service="CustomerPassThruService" relativeAddress="CustomerPassThru.svc" />
        <add factory="Ati.ServiceHost.Web.WebServiceHostFactory" service="GetAtiCustomerService" relativeAddress="GetAtiCustomerService.svc" />
        <add factory="Ati.ServiceHost.Web.WebServiceHostFactory" service="ManagedEventsService" relativeAddress="ManagedEventsService.svc" />
        <add factory="Ati.ServiceHost.Web.WebServiceHostFactory" service="CustomerPassThruService" relativeAddress="PassThruByNumber.svc" />
      </serviceActivations>
    </serviceHostingEnvironment>
    <behaviors>
      <serviceBehaviors>
        <behavior>

          <!--  To avoid disclosing metadata information, set the values below to false before deployment -->
          <serviceMetadata httpGetEnabled="true" httpsGetEnabled="true"/>
          
          <!--To receive exception details in faults for debugging purposes, set the value below to true.  Set to false before deployment to avoid disclosing exception information -->
          <serviceDebug includeExceptionDetailInFaults="true" />
        
        </behavior>
      </serviceBehaviors>
    </behaviors>
  </system.serviceModel>
  <system.webServer>
    <modules runAllManagedModulesForAllRequests="true" />
    <!--
        To browse web app root directory during debugging, set the value below to true.
        Set to false before deployment to avoid disclosing web app folder information.
      -->
    <directoryBrowse enabled="true" />
  </system.webServer>

<system.diagnostics>
    <sharedListeners>
      
      
      <add name="rollingfile" type="Essential.Diagnostics.RollingFileTraceListener, Essential.Diagnostics" initializeData="{ApplicationName}--{DateTime:yyyy-MM-dd}.log" convertWriteToEvent="true">
        <!--
          Writes to a text file, rolling to a new file based on a filename template 
          (usually including the date).
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=RollingFileTraceListener
        -->
      </add>
      <add name="rollingxml" type="Essential.Diagnostics.RollingXmlTraceListener, Essential.Diagnostics" initializeData="{ApplicationName}-{DateTime:yyyyMMdd}.svclog">
        <!--
          Writes writes E2ETraceEvent XML fragments to a text file, rolling to a new 
          file based on a filename template (usually including the date).
          The E2ETraceEvent XML fragment format can be read by the Service Trace Viewer tool.
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=RollingXmlTraceListener
        -->
      </add>
    <add name="bufferedEmail" type="Essential.Diagnostics.BufferedEmailTraceListener, Essential.Diagnostics" initializeData="user1@example.org,user2@example.org">
        <!--
          Adds formatted trace messages to a buffer and sends an email when the process 
          exits, or on request.
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=BufferedEmailTraceListener
        -->
        <filter type="System.Diagnostics.EventTypeFilter" initializeData="Information" />
      </add><add name="coloredconsole" type="Essential.Diagnostics.ColoredConsoleTraceListener, Essential.Diagnostics" template="{DateTime:HH':'mm':'ssZ} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}" convertWriteToEvent="true">
        <!--
          Writes to the console output or error stream, using color to highlight 
          event types and allowing a customised output format.
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=ColoredConsoleTraceListener
        -->
      </add><add name="email" type="Essential.Diagnostics.EmailTraceListener, Essential.Diagnostics" initializeData="user1@example.org,user2@example.org">
        <!--
	        Sends each trace message received in an email, using the specified subject and 
          body templates. Note: Set a filter to avoid flooding.
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=EmailTraceListener
        -->
        <filter type="System.Diagnostics.EventTypeFilter" initializeData="Warning" />
      </add><add name="inmemory" type="Essential.Diagnostics.InMemoryTraceListener, Essential.Diagnostics" initializeData="100">
        <!--
          Records and immutable copy of trace events in memory, within a circular buffer
          of the specified size. 
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=InMemoryTraceListener
  	    -->
      </add><add name="rollingfile" type="Essential.Diagnostics.RollingFileTraceListener, Essential.Diagnostics" initializeData="E:\App_Logs\AtiServiceBroker\ATIServiceBroker-{LocalDateTime:yyyy-MM-dd}.log" convertWriteToEvent="true" template="{LocalDateTime} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}">
        <!--
          Writes to a text file, rolling to a new file based on a filename template 
          (usually including the date).
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=RollingFileTraceListener
        -->
      </add>
      <add name="cardLog" type="Essential.Diagnostics.RollingFileTraceListener, Essential.Diagnostics" initializeData="E:\App_Logs\AtiServiceBroker\ATIServiceBrokerCard-{LocalDateTime:yyyy-MM-dd}.log" convertWriteToEvent="true" template="{LocalDateTime} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}">
        <!--
          Writes to a text file, rolling to a new file based on a filename template 
          (usually including the date).
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=RollingFileTraceListener
        -->
      </add>
      <add name="rollingxml" type="Essential.Diagnostics.RollingXmlTraceListener, Essential.Diagnostics" initializeData="E:\App_Logs\AtiServiceBroker\ATIServiceBroker-{LocalDateTime:yyyyMMdd}.svclog" template="{LocalDateTime} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}">
        <!--
          Writes writes E2ETraceEvent XML fragments to a text file, rolling to a new 
          file based on a filename template (usually including the date).
          The E2ETraceEvent XML fragment format can be read by the Service Trace Viewer tool.
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=RollingXmlTraceListener
        -->
      </add><add name="sqldatabase" type="Essential.Diagnostics.SqlDatabaseTraceListener, Essential.Diagnostics" initializeData="diagnosticsdb" applicationName="Diagnostics.Sample">
        <!--
          Trace listener that writes to the database connection specified into a
          table created by the diagnostics_regsql.exe tool (in the package tools directory).
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=SqlDatabaseTraceListener
        -->
      </add></sharedListeners>
  <sources>
    <source name="AtiServiceBroker" switchValue="All">
      <listeners>
        <clear />
        <add name="rollingfile" />
      </listeners>
    </source>
    <source name="AtiCardTrace" switchValue="All">
      <listeners>
        <clear/>
        <add name="cardLog" />
      </listeners>
    </source>
    <!--
        = Sample Source =
      <source name=""
              switchValue="All|None|Critical|Error|Warning|Information|Verbose|ActivityTracing"
              switchName="">
        <listeners>
          <clear />
          <add name="" />
          <add name="" />
        </listeners>
      </source>
      -->
  </sources>
    
    
    
  <switches>
      <!--
          Specify switchName (instead of switchValue) to use the same
          switch for multiple sources.
          Values can either be SourceLevels name values, decimal,
          or hexadecimal.
        -->
      <add name="SourceSwitch1" value="None,Critical,Error,Warning,Information,Verbose,ActivityTracing,All" />
      <add name="SourceSwitch2" value="0,1,3,7,15,31,0xFF00,0xFFFF" />
    </switches><!--
    --><trace autoflush="true" indentsize="0">
      <listeners>
        <!--
          Legacy Trace.Write() statements (not using a TraceSource).
          Turn indent off to avoid confusion for multithreaded traces,
          and clear the default listener for performance.
        -->
        <clear />
      </listeners>
    </trace></system.diagnostics>
  
<system.net>
    <mailSettings>
      <smtp deliveryMethod="SpecifiedPickupDirectory" from="diagnostics@example.org">
        <!--
          Used by email trace listeners. For production, or if using a test SMTP server 
          such as smtp4dev, change to deliveryMethod="Network" and specify your mail host.
        -->
        <network host="localhost" defaultCredentials="true" />
        <specifiedPickupDirectory pickupDirectoryLocation="C:\Temp\MailPickup" />
      </smtp>
    </mailSettings>
  </system.net></configuration>
