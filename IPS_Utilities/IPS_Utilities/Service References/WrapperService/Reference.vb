'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18408
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Runtime.Serialization

Namespace WrapperService
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"),  _
     System.Runtime.Serialization.DataContractAttribute(Name:="WrapperResult", [Namespace]:="http://schemas.datacontract.org/2004/07/WrapperService"),  _
     System.SerializableAttribute(),  _
     System.Runtime.Serialization.KnownTypeAttribute(GetType(WrapperService.WrapperResult.StatusEnum))>  _
    Partial Public Class WrapperResult
        Inherits Object
        Implements System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
        
        <System.NonSerializedAttribute()>  _
        Private extensionDataField As System.Runtime.Serialization.ExtensionDataObject
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private FailureReasonField As Object
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private ResultField As Object
        
        <System.Runtime.Serialization.OptionalFieldAttribute()>  _
        Private ResultStatusField As WrapperService.WrapperResult.StatusEnum
        
        <Global.System.ComponentModel.BrowsableAttribute(false)>  _
        Public Property ExtensionData() As System.Runtime.Serialization.ExtensionDataObject Implements System.Runtime.Serialization.IExtensibleDataObject.ExtensionData
            Get
                Return Me.extensionDataField
            End Get
            Set
                Me.extensionDataField = value
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property FailureReason() As Object
            Get
                Return Me.FailureReasonField
            End Get
            Set
                If (Object.ReferenceEquals(Me.FailureReasonField, value) <> true) Then
                    Me.FailureReasonField = value
                    Me.RaisePropertyChanged("FailureReason")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property Result() As Object
            Get
                Return Me.ResultField
            End Get
            Set
                If (Object.ReferenceEquals(Me.ResultField, value) <> true) Then
                    Me.ResultField = value
                    Me.RaisePropertyChanged("Result")
                End If
            End Set
        End Property
        
        <System.Runtime.Serialization.DataMemberAttribute()>  _
        Public Property ResultStatus() As WrapperService.WrapperResult.StatusEnum
            Get
                Return Me.ResultStatusField
            End Get
            Set
                If (Me.ResultStatusField.Equals(value) <> true) Then
                    Me.ResultStatusField = value
                    Me.RaisePropertyChanged("ResultStatus")
                End If
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
        
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"),  _
         System.Runtime.Serialization.DataContractAttribute(Name:="WrapperResult.StatusEnum", [Namespace]:="http://schemas.datacontract.org/2004/07/WrapperService")>  _
        Public Enum StatusEnum As Integer
            
            <System.Runtime.Serialization.EnumMemberAttribute()>  _
            Success = 0
            
            <System.Runtime.Serialization.EnumMemberAttribute()>  _
            MissingPararmeter = 1
            
            <System.Runtime.Serialization.EnumMemberAttribute()>  _
            WrapperNotFound = 2
            
            <System.Runtime.Serialization.EnumMemberAttribute()>  _
            Other = 3
        End Enum
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ServiceModel.ServiceContractAttribute(ConfigurationName:="WrapperService.IWrapperService")>  _
    Public Interface IWrapperService
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IWrapperService/TestService", ReplyAction:="http://tempuri.org/IWrapperService/TestServiceResponse")>  _
        Function TestService(ByVal customerId As Integer, ByVal name As String, ByVal parameters As String) As WrapperService.WrapperResult
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IWrapperService/TestService", ReplyAction:="http://tempuri.org/IWrapperService/TestServiceResponse")>  _
        Function TestServiceAsync(ByVal customerId As Integer, ByVal name As String, ByVal parameters As String) As System.Threading.Tasks.Task(Of WrapperService.WrapperResult)
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IWrapperService/ProductionService", ReplyAction:="http://tempuri.org/IWrapperService/ProductionServiceResponse")>  _
        Function ProductionService(ByVal customerId As Integer, ByVal name As String, ByVal parameters As String) As WrapperService.WrapperResult
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IWrapperService/ProductionService", ReplyAction:="http://tempuri.org/IWrapperService/ProductionServiceResponse")>  _
        Function ProductionServiceAsync(ByVal customerId As Integer, ByVal name As String, ByVal parameters As String) As System.Threading.Tasks.Task(Of WrapperService.WrapperResult)
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IWrapperService/AddNewServiceProxy", ReplyAction:="http://tempuri.org/IWrapperService/AddNewServiceProxyResponse")>  _
        Sub AddNewServiceProxy(ByVal customerId As Integer, ByVal serviceMethodName As String)
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IWrapperService/AddNewServiceProxy", ReplyAction:="http://tempuri.org/IWrapperService/AddNewServiceProxyResponse")>  _
        Function AddNewServiceProxyAsync(ByVal customerId As Integer, ByVal serviceMethodName As String) As System.Threading.Tasks.Task
    End Interface
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Public Interface IWrapperServiceChannel
        Inherits WrapperService.IWrapperService, System.ServiceModel.IClientChannel
    End Interface
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class WrapperServiceClient
        Inherits System.ServiceModel.ClientBase(Of WrapperService.IWrapperService)
        Implements WrapperService.IWrapperService
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String)
            MyBase.New(endpointConfigurationName)
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As String)
            MyBase.New(endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal binding As System.ServiceModel.Channels.Binding, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(binding, remoteAddress)
        End Sub
        
        Public Function TestService(ByVal customerId As Integer, ByVal name As String, ByVal parameters As String) As WrapperService.WrapperResult Implements WrapperService.IWrapperService.TestService
            Return MyBase.Channel.TestService(customerId, name, parameters)
        End Function
        
        Public Function TestServiceAsync(ByVal customerId As Integer, ByVal name As String, ByVal parameters As String) As System.Threading.Tasks.Task(Of WrapperService.WrapperResult) Implements WrapperService.IWrapperService.TestServiceAsync
            Return MyBase.Channel.TestServiceAsync(customerId, name, parameters)
        End Function
        
        Public Function ProductionService(ByVal customerId As Integer, ByVal name As String, ByVal parameters As String) As WrapperService.WrapperResult Implements WrapperService.IWrapperService.ProductionService
            Return MyBase.Channel.ProductionService(customerId, name, parameters)
        End Function
        
        Public Function ProductionServiceAsync(ByVal customerId As Integer, ByVal name As String, ByVal parameters As String) As System.Threading.Tasks.Task(Of WrapperService.WrapperResult) Implements WrapperService.IWrapperService.ProductionServiceAsync
            Return MyBase.Channel.ProductionServiceAsync(customerId, name, parameters)
        End Function
        
        Public Sub AddNewServiceProxy(ByVal customerId As Integer, ByVal serviceMethodName As String) Implements WrapperService.IWrapperService.AddNewServiceProxy
            MyBase.Channel.AddNewServiceProxy(customerId, serviceMethodName)
        End Sub
        
        Public Function AddNewServiceProxyAsync(ByVal customerId As Integer, ByVal serviceMethodName As String) As System.Threading.Tasks.Task Implements WrapperService.IWrapperService.AddNewServiceProxyAsync
            Return MyBase.Channel.AddNewServiceProxyAsync(customerId, serviceMethodName)
        End Function
    End Class
End Namespace
