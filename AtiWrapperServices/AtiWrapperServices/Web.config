<?xml version="1.0"?>
<configuration>
  
  <appSettings>
    
    <add key="aspnet:UseTaskFriendlySynchronizationContext" value="true"/>
    

    <!-- The 'WrapperServiceMode' Value is used to control the service methods used by the wrapper service. Valid values are 'Test', 'Production', 'Development'.  
         Test and Development use Test DB.ServiceData.ServiceURLs.TestURL field(s) for running the proxy services.
         Production uses Production DB.ServiceData.ServiceURLs.ProductionURL field(s) for running the proxy services.-->
    
    <add key="WrapperServiceMode" value="Development" />
    <!--<add key="WrapperServiceMode" value ="Test"/>-->
    <!--<add key="WrapperServiceMode" value ="Production"/>-->
    
    <!--The 'CardTrace' value is used (turned on) if there is a business case for use ONLY.
        0 is off, 1 is on. DO NOT USE IN PRODUCTION FOR LONG AND REMOVE THE LOG FILE.-->
    <add key="CardTrace" value="0"/>
  
  
    <!--The 'LogRequests' value is used to activate a log file for each request that is sent from the Wrapper Service for the purpose of debugging service interfaces-->
    <add key="LogRequests"  value="1"/>
  </appSettings>
  <system.web>
    <compilation targetFramework="4.5" debug="true"/>
    <httpRuntime targetFramework="4.5"/>
  </system.web>
  <connectionStrings>
   
      <add name="ServiceDataConnection" connectionString="data source=mtdog;User=ati_wrapperservice;Password=6Yh3L2!1;initial catalog=ServiceData;integrated security=True" providerName="System.Data.SqlClient" />

    <!--
        For SqlDatabaseTraceListener use the tool installed in the tools directory by Nuget 
        to install the default database on the local SQL instance, using Windows credentials:
        .\diagnostics_regsql.exe -E -AD
      -->
    <!--Development Connection String For localHost -->
    <!--<add name="ServiceProxyDBContext" connectionString="metadata=res://*/ServiceProxyDatabase.csdl|res://*/ServiceProxyDatabase.ssdl|res://*/ServiceProxyDatabase.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=DEVWILSON\SQLSERVER2008R2;User=ati_wrapperservice;Password=6Yh3L2!1;initial catalog=ServiceData;integrated security=False;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient"/>-->
    
    <!--Development connection String for Staging -->
    <!--<add name="ServiceProxyDBContext" connectionString="metadata=res://*/ServiceProxyDatabase.csdl|res://*/ServiceProxyDatabase.ssdl|res://*/ServiceProxyDatabase.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=mtdog;User=ati_wrapperservice;Password=6Yh3L2!1;initial catalog=ServiceData;integrated security=False;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient"/>-->

    <!--Staging connection String -->
    <!--<add name="ServiceProxyDBContext" connectionString="metadata=res://*/ServiceProxyDatabase.csdl|res://*/ServiceProxyDatabase.ssdl|res://*/ServiceProxyDatabase.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=mtdog;User=ati_wrapperservice;Password=6Yh3L2!1;initial catalog=ServiceData;integrated security=False;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient"/>-->

    <!--Production connection String -->
    <!--<add name="ServiceProxyDBContext" connectionString="metadata=res://*/ServiceProxyDatabase.csdl|res://*/ServiceProxyDatabase.ssdl|res://*/ServiceProxyDatabase.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=mtk2;User=ati_wrapperservice;Password=6Yh3L2!1;initial catalog=ServiceData;integrated security=False;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient"/>-->
    
    <!-- Default Microsoft Connection Strings -->
    
    <add name="diagnosticsdb" providerName="System.Data.SqlClient" connectionString="server=.;database=diagnosticsdb;Integrated Security=SSPI"/>
    
  </connectionStrings>
  
  <system.diagnostics>
    <sources>
      <source name="WrapperService" switchValue="All">
        <listeners>
          <clear />
          <add name="Default" type="System.Diagnostics.DefaultTraceListener" />
          <add name="rollingfile">
            <filter type="" />
          </add>
        </listeners>
      </source>
      <source name="AtiWrapperServiceCard" switchValue="All">
        <listeners>
          <clear />
          <add name="Default" type="System.Diagnostics.DefaultTraceListener" />
          <add name="cardLog">
            <filter type="" />
          </add>
        </listeners>
      </source>
      <source name="AtiWrapperServiceRequestsLog" switchValue="All">
        <listeners>
          <clear />
          <add name="Default" type="System.Diagnostics.DefaultTraceListener" />
          <add name="requestLog">
            <filter type="" />
          </add>
        </listeners>
      </source>
      <source name="System.ServiceModel.MessageLogging" switchValue="Warning,ActivityTracing">
        <listeners>
          <add type="System.Diagnostics.DefaultTraceListener" name="Default">
            <filter type="" />
          </add>
          <add name="ServiceModelMessageLoggingListener">
            <filter type="" />
          </add>
        </listeners>
      </source>
      <source propagateActivity="true" name="System.ServiceModel" switchValue="Warning,ActivityTracing">
        <listeners>
          <add type="System.Diagnostics.DefaultTraceListener" name="Default">
            <filter type="" />
          </add>
          <add name="ServiceModelTraceListener">
            <filter type="" />
          </add>
        </listeners>
      </source>
    </sources>
    <sharedListeners>
      <add initializeData="user1@example.org,user2@example.org" type="Essential.Diagnostics.BufferedEmailTraceListener, Essential.Diagnostics"
        name="bufferedEmail">
        <filter type="System.Diagnostics.EventTypeFilter" initializeData="Information" />
      </add>
      <add type="Essential.Diagnostics.ColoredConsoleTraceListener, Essential.Diagnostics"
        name="coloredconsole">
        <filter type="" />
      </add>
      <add initializeData="user1@example.org,user2@example.org" type="Essential.Diagnostics.EmailTraceListener, Essential.Diagnostics"
        name="email">
        <filter type="System.Diagnostics.EventTypeFilter" initializeData="Warning" />
      </add>
      <add initializeData="100" type="Essential.Diagnostics.InMemoryTraceListener, Essential.Diagnostics"
        name="inmemory">
        <filter type="" />
      </add>
      <add template="{LocalDateTime} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}"
        convertWriteToEvent="true" initializeData="E:\App_Logs\AtiWrapperService\ATIWrapperServices-{LocalDateTime:yyyy-MM-dd}.log"
        type="Essential.Diagnostics.RollingFileTraceListener, Essential.Diagnostics"
        name="rollingfile">
        <filter type="" />
      </add>
      <add template="{LocalDateTime} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}"
        convertWriteToEvent="true" initializeData="E:\App_Logs\AtiWrapperService\AtiWrapperServiceCard-{LocalDateTime:yyyy-MM-dd}.log"
        type="Essential.Diagnostics.RollingFileTraceListener, Essential.Diagnostics"
        name="cardLog">
        <filter type="" />
      </add>
      <add template="{LocalDateTime} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}"
        convertWriteToEvent="true" initializeData="E:\App_Logs\AtiWrapperService\AtiWrapperServiceRequest-{LocalDateTime:yyyy-MM-dd}.log"
        type="Essential.Diagnostics.RollingFileTraceListener, Essential.Diagnostics"
        name="requestLog">
        <filter type="" />
      </add>
      <add initializeData="E:\App_Logs\AtiWrapperService\ATIWrapperServices-{LocalDateTime:yyyyMMdd}.svclog"
        type="Essential.Diagnostics.RollingXmlTraceListener, Essential.Diagnostics"
        name="rollingxml">
        <filter type="" />
      </add>
      <add applicationName="Diagnostics.Sample" initializeData="diagnosticsdb"
        type="Essential.Diagnostics.SqlDatabaseTraceListener, Essential.Diagnostics"
        name="sqldatabase">
        <filter type="" />
      </add>
      <add initializeData="E:\App_Logs\AtiWrapperService\web_messages.svclog"
        type="System.Diagnostics.XmlWriterTraceListener, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
        name="ServiceModelMessageLoggingListener" traceOutputOptions="Timestamp">
        <filter type="" />
      </add>
      <add initializeData="E:\App_Logs\AtiWrapperService\web_tracelog.svclog"
        type="System.Diagnostics.XmlWriterTraceListener, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
        name="ServiceModelTraceListener" traceOutputOptions="Timestamp">
        <filter type="" />
      </add>
    </sharedListeners>
    <switches>
      <add name="SourceSwitch1" value="None,Critical,Error,Warning,Information,Verbose,ActivityTracing,All" />
      <add name="SourceSwitch2" value="0,1,3,7,15,31,0xFF00,0xFFFF" />
    </switches>
    <trace autoflush="true" indentsize="0">
      <listeners>
        <clear />
      </listeners>
    </trace>
  </system.diagnostics>
  <system.net>
    <mailSettings>
      <smtp deliveryMethod="SpecifiedPickupDirectory" from="diagnostics@example.org">
        <!--
          Used by email trace listeners. For production, or if using a test SMTP server 
          such as smtp4dev, change to deliveryMethod="Network" and specify your mail host.
        -->
        <network host="localhost" defaultCredentials="true"/>
        <specifiedPickupDirectory pickupDirectoryLocation="C:\Temp\MailPickup"/>
      </smtp>
    </mailSettings>
  </system.net>
  <system.serviceModel>
    <diagnostics>
      <messageLogging logEntireMessage="true" logMalformedMessages="true"
        logMessagesAtTransportLevel="true" />
    </diagnostics>
    <behaviors>
      <serviceBehaviors>
        <behavior>
          
          <!-- To avoid disclosing metadata information, set the values below to 'false' before deployment -->
          <!--<serviceMetadata httpGetEnabled="true" httpsGetEnabled="true"/>-->
          <serviceMetadata httpGetEnabled="true" httpsGetEnabled="true"/>
      
          <!-- To receive exception details in faults for debugging purposes, set the value below to true.  Set to false before deployment to avoid disclosing exception information -->
          <!--<serviceDebug includeExceptionDetailInFaults="true"/>-->
          <serviceDebug includeExceptionDetailInFaults="true"/>
        
      
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <protocolMapping>
      <add binding="basicHttpsBinding" scheme="https"/>
    </protocolMapping>
    <serviceHostingEnvironment aspNetCompatibilityEnabled="true" multipleSiteBindingsEnabled="true"/>
  </system.serviceModel>
  <system.webServer>
    <modules runAllManagedModulesForAllRequests="true"/>
    <!--
        To browse web app root directory during debugging, set the value below to true.
        Set to false before deployment to avoid disclosing web app folder information.
      -->
    <directoryBrowse enabled="true"/>
  </system.webServer>
</configuration>